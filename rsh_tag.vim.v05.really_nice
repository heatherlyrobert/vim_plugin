""===[[ START HDOC ]]==========================================================#
""===[[ HEADER ]]==============================================================#

"   niche         : integrated development environment
"   application   : rsh_tag.vim
"   purpose       : smooth ctags navigation within vim/ide
"   base_system   : gnu/linux
"   lang_name     : vim script
"   created       : svq - long, long ago
"   author        : the_heatherlys
"   dependencies  : none (vim only)
"   permissions   : GPL-2 with no warranty of any kind
"
"
""===[[ PURPOSE ]]=============================================================#

"   rsh_tag is a fast, clear, standard, and simple tag navigation tool to
"   provide the programmer with a categorized table of global symbols for all
"   buffers open in the current vim session
"
"   this tool is meant to provide...
"      - an inventory of all global symbols in the file
"      - to work with all major programming and scripting languages
"      - quick, short-cut based navigation within a file/window
"      - and nothing else
"
"
""===[[ WORK ]]================================================================#

"  TODO create function accessors for first, next, current, and count
"  TODO change all init() functions to be like rsh_tag.vim
"
""===[[ END HDOC ]]============================================================#



""===[[ HEADER GUARD ]]========================================================#
if exists('HTAG_hguard')
   finish
endif
let g:HTAG_hguard = 1



"==============================================================================#
"=======                        initialization                          =======#
"==============================================================================#



"---(general)------------------------------------#
let g:HTAG_title    = "HTAG_buffer"
let g:HTAG_locked   = "n"
let g:HTAG_times    = 0
"---(current tag)--------------------------------#
let s:HTAG_tagn     = ""
let s:HTAG_line     = 0
let s:HTAG_file     = ""
let s:HTAG_type     = ""
let s:HTAG_iden     = ""
"---(function cursor)----------------------------#
let s:HTAG_cfile    = 0
let s:HTAG_ctype    = 0
let s:HTAG_chead    = 0
let s:HTAG_ccount   = 0
let s:HTAG_ccurr    = 0



"===[ ROOT   ]===> main setup routine
function! HTAG_init()
   silent! exec 'vert split '.g:HTAG_title
   setlocal modifiable
   call HALL_start()
   call HTAG_syntax()
   call HTAG_keys()
   setlocal nomodifiable
   hide
   return
endfunction



"===[ LEAF   ]===> establish syntax highlighting
function! HTAG_syntax()
   syntax clear
   syntax match htag_file           '^[A-Za-z0-9_.-]\+[ ]\+FILE'
   syntax match htag_major          '^[a-z].*[ ]([0-9]\+)$'
   syntax match htag_context        '^  [a-z][a-z/][a-z] [=].*'
   syntax match htag_detail         '^[a-z][a-z]  .*'
   syntax match htag_tag            '^[a-z][a-z]  ' containedin=rsh_tag_detail
   hi htag_file     cterm=reverse,bold   ctermbg=none   ctermfg=5
   hi htag_major    cterm=bold,underline ctermbg=none   ctermfg=5
   hi htag_context  cterm=none           ctermbg=none   ctermfg=3
   hi htag_detail   cterm=none           ctermbg=none   ctermfg=0
   hi htag_tag      cterm=bold           ctermbg=none   ctermfg=4
   return
endfunction



"===[ LEAF   ]===> establish the buffer specific key mapping
function! HTAG_keys()
   nmap          ,t  :call HTAG_show()<cr>
   nmap          ;;  :call HTAG_hints()<cr>
   nmap <buffer> t   :call HTAG_update()<cr>
   nmap <buffer> h   :call HTAG_hide()<cr>
   return
endfunction

function! tesrtinrst()
endfunction

"===[ LEAF   ]===> establish automatic updating strategy
function! HTAG_auto_on()
   augroup HTAG
      autocmd HTAG      BufEnter      * call HTAG_change()
      autocmd HTAG      BufRead       * call HTAG_change()
      "autocmd HTAG      BufWrite      * call HTAG_update()
      autocmd HTAG      BufNewFile    * call HTAG_change()
   augroup END
   return
endfunction


"===[ LEAF   ]===> turn off automatic updating strategy
function! HTAG_auto_off()
   autocmd! HTAG
   augroup! HTAG
   augroup END
   return
endfunction



"==============================================================================#
"=======                           show/hide                            =======#
"==============================================================================#



"===[ ROOT   ]===> main setup routine <==============================#
function! HTAG_show()
   "---(do not allow recursion)------------------#
   if (g:HTAG_locked == "y")
      return
   endif
   "---(save working win/buf/loc)----------------#
   if (HBUF_save("HTAG_show()         :: ") < 1)
      return
   endif
   "---(lock her down)---------------------------#
   let  g:HBUF_locked = "y"
   let  g:HTAG_locked = "y"
   "---(verify the buffer)-----------------------#
   let l:tag_buf         = bufnr(g:HTAG_title)
   if (l:tag_buf < 1)
      call HTAG_init()
   endif
   "---(close the existing window)---------------#
   let l:tag_win = bufwinnr(l:tag_buf)
   if (l:tag_win > 0)
      silent exec l:tag_win.' wincmd w'
      hide
   endif
   "---(position it properly)--------------------#
   silent! exec 'vert split '.g:HTAG_title
   vert resize 20
   "---(activate the repositioning)--------------#
   call HTAG_auto_on()
   "---(set it up)-------------------------------#
   normal zt
   "---(let her go)------------------------------#
   let  g:HBUF_locked = "n"
   let  g:HTAG_locked = "n"
   "---(complete)--------------------------------#
   echon "HTAG_show()           :: complete."
   return
endfunction



"===[ LEAF   ]===> hide the window
function! HTAG_hide()
   "---> can only be called from inside the window
   call HTAG_auto_off()
   hide
   call HBUF_restore()
   return
endfunction



function! HTAG_change()
   "---(do not allow recursion)------------------#
   if (g:HTAG_locked == "y")
      return
   endif
   "---(save working win/buf/loc)----------------#
   if (HBUF_save("HTAG_change()       :: ") < 1)
      return
   endif
   "---(find the tags window)--------------------#
   if (HBUF_by_name(g:HTAG_title) < 1)
      return
   endif
   "---(lock her down)---------------------------#
   let  g:HBUF_locked = "y"
   let  g:HTAG_locked = "y"
   silent! exec l:tag_win.' wincmd w'
   "---(go to the right place)-------------------"
   normal gg
   call search("^".g:RSH_BUF_progname."[ ].*FILE$","cW")
   silent exec "normal zt"
   "---(go back to working win/buf/loc)----------#
   call HBUF_restore()
   "---(let her go)------------------------------#
   let  g:HTAG_locked = "n"
   let  g:HBUF_locked = "n"
   "---(complete)--------------------------------#
   return
endfunction



"===[ LEAF   ]===> get a tag id from the user
function! HTAG_hint_input()
   echon   "enter tag text = "
   let    l:x_one = printf("%c", getchar())
   echon  l:x_one
   if l:x_one < "a" || l:x_one > "z"
      echon "  (invalid character) user canceled..."
      return "--"
   endif
   let    l:x_two = printf("%c", getchar())
   echon  l:x_two
   if l:x_two < "a" || l:x_two > "z"
      echon "  (invalid character) user canceled..."
      return "--"
   endif
   let    l:x_tag = l:x_one . l:x_two
   return l:x_tag
endfunction



function! HTAG_hints()
   "---(save working win/buf/loc)----------------#
   echon "HTAG_hints()          :: "
   "---(save working win/buf/loc)----------------#
   if (HBUF_save("HTAG_hints()        :: ") < 1)
      return
   endif
   "---(get and vaidate the hint)-------------#
   let l:tag_id = HTAG_hint_input()
   if  l:tag_id == "--"
      return -1
   endif
   "---(identify the handler)-----------------#
   if l:tag_id >= "ma"
      echon "  (cscope/grep tag) processing..."
      call RSH_CSC_hints(l:tag_id)
      return
   endif
   echon "  (normal ctag) processing..."
   "---(switch to tag window)-----------------#
   let    l:win_num = HBUF_by_name(g:HTAG_title)
   if (l:win_num != -1)
      silent exec l:win_num.' wincmd w'
   endif
   silent exec   ":normal gg"
   "---(find the tag)-------------------------#
   call   search("^" . l:tag_id . "  ","cW")
   if line(".") <= 1
      echon "  TAG NOT FOUND, exiting"
      HBUF_restore()
      return
   endif
   let  l:full_line   = getline(".")
   call HTAG_parse()
   "---(highlight the tag)--------------------#
   silent exec "silent! syntax clear rsh_tag_identifier"
   silent exec "hi link rsh_tag_identifier function"
   silent exec "syntax match rsh_tag_identifier ' " . g:HTAG_iden . " ' containedin=ALL"
   "---(get back to the original window)------#
   let l:rc = HBUF_restore()
   if l:rc < 1
      return -1
   endif
   "---(get to the right buffer)--------------#
   if bufname('%') != g:HTAG_file
      let l:buf_num = bufnr(g:HTAG_file)
      if (l:buf_num == -1)
         echo "HTAG_hints() :: buffer not open in wim..."
         return
      else
         silent exec('b! ' . l:buf_num)
      endif
   endif
   "---(get to the right line)----------------# make sure to show comments above
   silent exec ":normal gg"
   silent! exec ":normal ".(g:HTAG_line - 1). "j"
   if g:HTAG_type == "function"
      silent exec "normal {j"
   endif
   silent exec "normal zt"
   "---(complete)-----------------------------#
   return
endfunction



""===[[ UTILITY ]]=============================================================#



""===[[ WINDOW UPDATE CODE ]]==================================================#

function! HTAG_update()
   "---(do not allow recursion)------------------#
   if (g:HTAG_locked == "y")
      return
   endif
   "---(start locked code)-----------------------#
   let  g:HBUF_locked = "y"
   let  g:HTAG_locked = "y"
   "---(run)-------------------------------------#
   let  g:HTAG_times  += 1
   call HTAG_list()
   "---(unlock code)-----------------------------#
   let  g:HTAG_locked = "n"
   let  g:HBUF_locked = "n"
   "---(return to previous window)---------------#
   call HBUF_restore()
   "---(complete)--------------------------------#
   "echon "HTAG_update()      :: complete."
   return
endfunction



function! HTAG_list()
   ""---(prepare locals)-------------------------#
   let l:g_hint_major = 1
   let l:g_hint_minor = 0
   ""---(clear out existing contents)------------#
   setlocal modifiable
   silent exec ":1,$delete"
   "---(loop through the valid buffers)----------#
   let l:i = HBUF_next(0)              " buffer index
   while l:i > 0
      "---(read the buffer)----------------#
      let l:full_name = bufname(l:i)
      let l:base_loc  = match(l:full_name,"[A-Za-z0-9_.]*$")
      let l:base_name = strpart(l:full_name,l:base_loc)
      "echon "HTAG_list()           :: processing ".l:base_name."..."
      "---(mark the bottom tags)--------#
      normal GG
      silent! normal mx
      "---(run the tags)----------------#
      silent! exec "$:!ctags -x --sort=no --c-kinds=cdefgnpstuvx --c++-kinds=cdefgnpstuvx --file-scope=yes ".l:full_name
      "---(go back and awk them)--------#
      silent! normal 'x
      silent! exec ":silent! .,$!rsh_tag.awk 'g_hint_major=".l:g_hint_major."' 'g_hint_minor=".l:g_hint_minor."' 'g_file_name=".l:base_name."'"
      "---(collect the 'last tag')------#
      normal GG
      let l:g_hint_minor = getline('.')
      normal Dk
      let l:g_hint_major = getline('.')
      normal D
      "---(go back and awk them)--------#
      "silent! normal 'x
      "call HTAG_func_syn(l:base_name)
      let l:i = HBUF_next(l:i)            " buffer index
   endwhile
   normal gg
   setlocal nomodifiable
   return
endfunction



function! HTAG_func_syn(base_name)
   "> start of next buffer entriies
   normal j
   let l:stop_line  = search("   FILE$", "W") - 1
   if l:stop_line == -1
      normal GG
      let  l:stop_line    = line('.')
   endif
   "---(find the functions)----------------------#
   silent! normal 'x
   let  l:curr_line = search("function (","W", l:stop_line)
   silent! exec "normal mx"
   if l:curr_line == 0
      return
   endif
   let  l:full_line    = getline('.')
   let  l:count        = matchstr(l:full_line, "(.*)")
   let  l:count        = strpart(l:count, 1, strlen(l:count) - 2 ) - 0
   let  l:curr         = 1
   let  l:rtag_iden    = " "
   let  l:rtag_list    = []
   while l:curr <= l:count
      silent! exec "normal 'x"
      exec "normal ".l:curr."j"
      let  l:full_line    = getline('.')
      if l:full_line == ""
         break
      endif
      "echo "HTAG_findloc()        :: parse (".l:curr.") ".l:full_line
      "sleep 1
      let  l:rtag_iden    = matchstr(l:full_line, "  #3#  .*  #4#  ")
      let  l:rtag_iden    = strpart(l:rtag_iden, 7, strlen(l:rtag_iden) - 14)
      "echo "HTAG_findloc()        :: parse (".l:curr.") ".l:rtag_iden
      "sleep 1
      let  l:rtag_list += [l:rtag_iden]
      let  l:curr = l:curr + 1
   endwhile
   "---(complete)--------------------------------#
   "echo "HTAG_findloc()        :: returning ".l:rtag_iden."..."
   "sleep 1
   let l:my_buf = bufnr('%')
   silent exec('b! ' . bufnr(a:base_name))
   "echo "HTAG_findloc()        :: moved from ".l:my_buf." to ".bufnr('%')
   "sleep 1
   execute 'silent! syntax clear rsh_tag_function'
   for  l:temp in l:rtag_list
      silent exec "syntax match rsh_tag_function '".l:temp."'"
      "echo "HTAG_findloc()        :: parsing ".l:temp."..."
      "sleep 1
   endfor
   "hi rsh_tag_function     cterm=bold ctermbg=none   ctermfg=5
   hi rsh_tag_function     cterm=bold ctermbg=6      ctermfg=4
   silent exec('b! '.l:my_buf)
   return
endfunction



function! HTAG_parse()
   "---(initialize)------------------------------#
   let  g:HTAG_tagn    = ""
   let  g:HTAG_line    = 0
   let  g:HTAG_file    = ""
   let  g:HTAG_type    = ""
   let  g:HTAG_iden    = ""
   "---(check for null)--------------------------#
   let  l:full_line = getline('.')
   if (l:full_line == "")
      return 0
   endif
   "---(tag number)------------------------------#
   let  g:HTAG_tagn    = strpart(l:full_line, 0, 2)
   "---(line number)-----------------------------#
   let  g:HTAG_line    = matchstr(l:full_line, "  #1#  .*  #2#  ")
   let  g:HTAG_line    = strpart(g:HTAG_line, 7, strlen(g:HTAG_line) - 14) + 0
   "---(file name)-------------------------------#
   let  g:HTAG_file    = matchstr(l:full_line, "  #2#  .*  #3#  ")
   let  g:HTAG_file    = strpart(g:HTAG_file, 7, strlen(g:HTAG_file) - 14)
   "---(tag type)--------------------------------#
   let  g:HTAG_type    = matchstr(l:full_line, "  #3#  .*  #4#  ")
   let  g:HTAG_type    = strpart(g:HTAG_type, 7, strlen(g:HTAG_type) - 14)
   "---(identifier)------------------------------#
   let  g:HTAG_iden    = matchstr(l:full_line, "  #4#  .*  #5#  ")
   let  g:HTAG_iden    = strpart(g:HTAG_iden, 7, strlen(g:HTAG_iden) - 14)
   "---(debug)-----------------------------------#
   "echo "iden=".g:HTAG_iden.", type=".g:HTAG_type.", line=".g:HTAG_line.", file=".g:HTAG_file
   "sleep 1
   "---(complete)--------------------------------#
   return 1
endfunction



function! HTAG_head(file, type)
   "---(do not allow recursion)------------------#
   if (g:HTAG_locked == "y")
      return -2
   endif
   "---(save working win/buf/loc)----------------#
   if (HBUF_save("HTAG_head()         :: ") < 1)
      return -2
   endif
   "---(make sure tags are updated)--------------#
   normal ,tt
   "---(check for the window)--------------------#
   if (HBUF_by_name(g:HTAG_title) < 1)
      echon "HTAG_head()         :: tag window not showing..."
      return -2
   endif
   "---(get full tag range for buffer)-----------#
   normal gg
   let  l:start_line = search("^".a:file."  ","cW")
   if (l:start_line < 1)
      echon "HTAG_head()         :: could not file file entry for ".a:file." FATAL"
      return -1
   endif
   normal mx
   normal j
   let l:stop_line  = search("   FILE$", "W") - 1
   if l:stop_line == -1
      normal GG
      let  l:stop_line    = line('.')
   endif
   "---(find the functions)----------------------#
   normal 'x
   if (search("function (","W", l:stop_line) < 1)
      echon "HTAG_findloc()        :: no functions in file ".a:base_name."..."
      return 0
   endif
   let  l:full_line    = getline('.')
   let  l:count        = matchstr(l:full_line, "(.*)")
   let  l:count        = strpart(l:count, 1, strlen(l:count) - 2 ) - 0
   normal mx
   normal j
   call HTAG_parse()
   "---(save context)----------------------------#
   normal 'x
   let  g:HTAG_cfile   = a:file
   let  g:HTAG_ctype   = a:type
   let  g:HTAG_chead   = line('.')
   let  g:HTAG_ccount  = l:count
   let  g:HTAG_ccurr   = 1
   "---(complete)--------------------------------#
   call HBUF_restore()
   return g:HTAG_chead
endfunction



function! HTAG_curr()
   echo "file=".g:HTAG_cfile.", type=".g:HTAG_ctype.", head=".g:HTAG_chead.", count=".g:HTAG_ccount.", curr=".g:HTAG_ccurr
   return
endfunction



function! HTAG_next()
   "---(do not allow recursion)------------------#
   if (g:HTAG_locked == "y")
      return -2
   endif
   "---(verify position in range)----------------#
   if (g:HTAG_ccurr >= g:HTAG_ccount)
      return -1
   endif
   "---(save working win/buf/loc)----------------#
   if (HBUF_save("HTAG_head()         :: ") < 1)
      return -2
   endif
   "---(check for the window)--------------------#
   if (HBUF_by_name(g:HTAG_title) < 1)
      echon "HTAG_head()         :: tag window not showing..."
      return -2
   endif
   "---(get full tag range for buffer)-----------#
   let  g:HTAG_ccurr += 1
   normal gg
   exec "normal ".g:HTAG_chead."G"
   exec "normal ".g:HTAG_ccurr."j"
   call HTAG_parse()
   "---(complete)--------------------------------#
   call HBUF_restore()
   return g:HTAG_chead
endfunction



function! HTAG_findloc(base_name, line_num)
   let l:curr_buf    = bufnr('%')     " get the current_buf
   "---(check for the buffer)--------------------#
   let l:buf_num = bufnr(g:HTAG_title)
   if (l:buf_num < 1)
      return
   endif
   silent exec('b! ' . l:buf_num)
   "---(get full tag range for buffer)-----------#
   "> start of buffer entries
   normal gg
   let  l:start_line = search("^".a:base_name."  ","cW")
   silent! exec "normal mx"
   "> start of next buffer entriies
   normal j
   let l:stop_line  = search("   FILE$", "W") - 1
   if l:stop_line == -1
      normal GG
      let  l:stop_line    = line('.')
   endif
   "---(find the functions)----------------------#
   silent! exec "normal 'x"
   let  l:curr_line = search("function (","W", l:stop_line)
   silent! exec "normal mx"
   if l:curr_line == 0
      "echon "HTAG_findloc()        :: no functions in file ".a:base_name."..."
      return "[--] <<global>>"
   endif
   let  l:full_line    = getline('.')
   let  l:count        = matchstr(l:full_line, "(.*)")
   let  l:count        = strpart(l:count, 1, strlen(l:count) - 2 ) - 0
   let  l:curr         = 1
   let  l:rtag_iden    = " "
   let  l:rtag_final   = "[--] <<global>>"
   while l:curr <= l:count
      silent! exec "normal 'x"
      exec "normal ".l:curr."j"
      if (HTAG_parse() < 1)
         break
      endif
      if g:HTAG_line >= a:line_num
         break
      endif
      let  l:rtag_final   = "[".g:HTAG_tagn."] ".g:HTAG_iden
      let  l:curr = l:curr + 1
   endwhile
   "---(complete)--------------------------------#
   silent exec('b! ' . l:curr_buf)
   return l:rtag_final
endfunction



call HTAG_init()
""===[[ END ]]=================================================================#
