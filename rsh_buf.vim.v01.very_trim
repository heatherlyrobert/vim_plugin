""=============================================================================#
""
""   system    : vim ide
""   program   : rsh_buf.vim
""   purpose   : provide simple buffer navigation within vim/ide
""   language  : vim script
""   author    : the_heatherlys
""   written   : svq
""
""=============================================================================#
"" DESIGN NOTES
""    - mark all functions with '!' so I can easily reload/overwrite the script
""


""===[[ HEADER GUARD ]]========================================================#
if exists('RSH_BUF_loaded')
   finish
endif
let g:RSH_BUF_loaded = 1


""===[[ GLOBALS ]]=============================================================#
let g:RSH_BUF_title    = "rsh_buf_explorer"
let g:RSH_BUF_buf_list = ""
let g:RSH_BUF_times    = 0
let g:RSH_BUF_locked   = "n"

augroup rsh_buf
autocmd rsh_buf  VimEnter    * call RSH_BUF_start()
autocmd rsh_buf  BufDelete   * call RSH_BUF_update()
autocmd rsh_buf  BufDelete   * call RSH_BUF_update()

command! -nargs=0 -bar  RBUFstart  call RSH_BUF_start()
command! -nargs=0 -bar  RBUFclose  call RSH_BUF_stop()
command! -nargs=0 -bar  RBUFtoggle call RSH_BUF_toggle()
command! -nargs=0 -bar  RBUFupdate call RSH_BUF_update()

""===[[ FUNCTIONS ]]===========================================================#
"close the buffer window
function! RSH_BUF_stop()
   " HISTORY :: was called 'StopExplorer' in minibufexplorer
   let l:win_num = RSH_BUF_find(g:RSH_BUF_title)
   if (l:win_num != -1)
      autocmd! rsh_buf
      exec l:win_num.' wincmd w'
      setlocal modifiable
      silent! close
      "wincmd p
   endif
endfunction


"create the buffer window
function! RSH_BUF_start()
   " HISTORY :: was called 'StopExplorer' in minibufexplorer
   augroup rsh_buf
   autocmd rsh_buf  BufEnter    * call RSH_BUF_update()
   autocmd rsh_buf  BufDelete   * call RSH_BUF_update()
   let g:RSH_BUF_buf_list = ""
   call RSH_BUF_update()
endfunction


"flip the explorer off the back on
function! RSH_BUF_toggle()
   " HISTORY :: was called 'ToggleExplorer' in minibufexplorer
   let l:win_num = RSH_BUF_find(g:RSH_BUF_title)
   if (l:win_num != -1)
      call RSH_BUF_stop()
   else
      call RSH_BUF_update()
      wincmd p
   endif
endfunction


"find a window number for a named buffer
function! RSH_BUF_find(buf_name)
   " HISTORY :: was called 'FindWindow' in minibufexplorer
   let l:buf_num = bufnr(a:buf_name)
   if (l:buf_num != -1)
      let l:win_num = bufwinnr(l:buf_num)
   else
      let l:win_num = -1
   endif
   return l:win_num
endfunction


function! RSH_BUF_specific(buf_num)
   if(a:buf_num != -1)             " If the buffer exists.
      if (getbufvar(bufnr('%'), '&modifiable') == 1)
         exec('b! ' . a:buf_num)
      endif
   endif
   return
endfunction


function! RSH_BUF_select()
   if bufname('%') != g:RSH_BUF_title
      return
   endif
   let l:buf_num  = RSH_BUF_get()
   wincmd p
   call RSH_BUF_specific(l:buf_num)
   return
endfunction


"return the buffer number for the buffer under the cursor.
function! RSH_BUF_get()
   " HISTORY :: was called 'GetSelectedBuffer' in minibufexplorer
   if bufname('%') != g:RSH_BUF_title
      return -1
   endif
   let l:save_reg = @"
   let @" = ""
   normal ""yi[
   if @" != ""
      let l:retv = substitute(@",'\([0-9]*\):.*', '\1', '') + 0
      let @" = l:save_reg
      return l:retv
   else
      let @" = l:save_reg
      return -1
   endif
endfunction



""=============================================================================#
""===[[ WINDOW UPDATE CODE ]]==================================================#
""=============================================================================#


function! RSH_BUF_update()
   " HISTORY :: was called 'AutoUpdate' in minibufexplorer
   " don't update during updates :)
      if (g:RSH_BUF_locked == "y")
         return
      endif
   " remember the current win/buf
      let l:buf_cur = bufnr('%')
      "let l:win_cur = bufwinnr(l:buf_cur)
   " don't update if just moving between protected windows
      if (getbufvar(l:buf_cur, '&modifiable') == 0)
         return
      endif
      if (getbufvar(l:buf_cur, '&buflisted') == 0)
         return
      endif
   " start locking
      let g:RSH_BUF_locked = "y"
   " keep a counter for debugging/tuning
      let g:RSH_BUF_times  = g:RSH_BUF_times + 1
   " check for the explorer
      let l:win_num = RSH_BUF_find(g:RSH_BUF_title)
      if (l:win_num == -1)
         call RSH_BUF_config()
         let l:win_num = RSH_BUF_find(g:RSH_BUF_title)
      endif
      exec l:win_num.' wincmd w'
   " update the buffer list
      call RSH_BUF_list()
   " get back to the original window (with new buffer)
      let l:win_cur = bufwinnr(l:buf_cur)
      if (l:win_cur != -1)
         exec l:win_cur.' wincmd w'
      endif
   " done and returning to user
   let g:RSH_BUF_locked = "n"
   return
endfunction


function! RSH_BUF_config()
   " was called 'StartExplorer' in minibufexplorer
   call RSH_BUF_create()
   if bufname('%') == g:RSH_BUF_title
      setlocal modifiable
      " structural addributes
         setlocal noswapfile
         setlocal buftype=nofile
         setlocal bufhidden=delete
      " cosmetic attributes
         setlocal winfixheight
         setlocal nowrap
         setlocal winwidth=1000
         setlocal foldcolumn=0
         setlocal nonumber
         setlocal nocursorcolumn
         setlocal nocursorline
      " syntax highlighting
         syn clear
         syn match rsh_buf_normal             '\[[^\]]*\]'
         syn match rsh_buf_changed            '\[[^\]]*\]+'
         syn match rsh_buf_visible            '\[[^\]]*\]\*'
         hi def link rsh_buf_normal           Keyword
         hi def link rsh_buf_changed          Function
         hi def link rsh_buf_visible          Special
      " key mapping
         nnoremap <buffer> <CR>    :call RSH_BUF_select()<CR>:<BS>
         nnoremap <buffer> <TAB>   :call search('\[[0-9]*:[^\]]*\]')<CR>:<BS>
         nnoremap <buffer> <S-TAB> :call search('\[[0-9]*:[^\]]*\]','b')<CR>:<BS>
      setlocal nomodifiable
   endif
   return
endfunction


" find or create the buffer window
function! RSH_BUF_create()
   " was called 'FindCreateWindow' in minibufexplorer
   let l:win_num = RSH_BUF_find(g:RSH_BUF_title)
   if (l:win_num != -1)
      exec l:win_num.' wincmd w'
   else
      exec 'topleft split '.g:RSH_BUF_title
      let  l:win_num = RSH_BUF_find(g:RSH_BUF_title)
      exec l:win_num.' wincmd w'
   endif
   exec('resize 1')
   return
endfunction


"recreate the buf_list
function! RSH_BUF_list()
   " HISTORY :: was called 'BuildBufferList' in minibufexplorer
   let l:max_buf_num = bufnr('$')     " Get the number of the last buffer.
   let l:buf_list    = ""
   " Loop through every buffer less than the total number of buffers.
   let l:i = 0                     " buffer index
   while (l:i <= l:max_buf_num)
      let l:i = l:i + 1
      if (getbufvar(l:i, '&buflisted') == 1)
         let l:buf_name = bufname(l:i)
         if (strlen(l:buf_name))
            if (getbufvar(l:i, '&modifiable') == 1)
               let l:buf_short = fnamemodify(l:buf_name, ":t")
               let l:buf_short = substitute(l:buf_short, '[][()]', '', 'g')
               let l:tab = ' ['.l:i.':'.l:buf_short.']'
               if (l:i <= 9)
                  "exec "map ,".l:i."  :call RSH_BUF_specific(" \ . l:i .  ")<CR>")
                  exec "map ,".l:i."  :call RSH_BUF_specific(".l:i.")<cr>"
               endif
               if (bufwinnr(l:i) != -1)
                  let l:tab = l:tab . '*'
               endif
               if(getbufvar(l:i, '&modified') == 1)
                  let l:tab = l:tab . '+'
               endif
               let l:buf_list = l:buf_list.l:tab
            endif
         endif
      endif
   endwhile
   if (g:RSH_BUF_buf_list != l:buf_list)
      let g:RSH_BUF_buf_list = l:buf_list
      call RSH_BUF_show()
   endif
   return
endfunction


function! RSH_BUF_show()
   setlocal modifiable
   1,$d _
   put! =g:RSH_BUF_buf_list
   2,$d _
   set nobuflisted
   setlocal nomodifiable
   return
endfunction

