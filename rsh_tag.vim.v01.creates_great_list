""=============================================================================#
""
""   system    : vim ide
""   program   : rsh_tag.vim
""   purpose   : provide ctags navigation within vim/ide
""   language  : vim script
""   author    : the_heatherlys
""   written   : svq
""
""=============================================================================#
"" DESIGN NOTES
""    - mark all functions with '!' so I can easily reload/overwrite the script
""





""=============================================================================#
""===[[ GLOBALS ]]=============================================================#
""=============================================================================#


""===[[ HEADER GUARD ]]========================================================#
if exists('RSH_TAG_loaded')
   finish
endif
let g:RSH_TAG_loaded = 1


""===[[ GLOBALS ]]=============================================================#
let g:RSH_TAG_title    = "b>_rsh_ctags"
let g:RSH_TAG_ctags    = "exuberant-ctags"
let g:RSH_TAG_times    = 0
let g:RSH_TAG_locked   = "n"


let TagList_title = "__Tag_List__"


""===[[ AUTO COMMANDS ]]=======================================================#
augroup rsh_tag
"autocmd rsh_tag  VimEnter    * call RSH_BUF_start()
"autocmd rsh_tag  BufDelete   * call RSH_BUF_update()
"autocmd rsh_tag  BufDelete   * call RSH_BUF_update()

command! -nargs=0 -bar  RTAGstart  call RSH_TAG_start()
command! -nargs=0 -bar  RTAGclose  call RSH_TAG_stop()
command! -nargs=0 -bar  RTAGtoggle call RSH_TAG_toggle()
command! -nargs=0 -bar  RTAGupdate call RSH_TAG_update()





""=============================================================================#
""===[[ START/STOP ]]==========================================================#
""=============================================================================#


"create the buffer window
function! RSH_TAG_start()
   call RSH_TAG_update()
endfunction


"close the buffer window
function! RSH_BUF_stop()
   " HISTORY :: was called 'StopExplorer' in minibufexplorer
   let l:win_num = RSH_BUF_find(g:RSH_BUF_title)
   if (l:win_num != -1)
      autocmd! rsh_buf
      exec l:win_num.' wincmd w'
      setlocal modifiable
      silent! close
      "wincmd p
   endif
endfunction


"flip the explorer off the back on
function! RSH_BUF_toggle()
   " HISTORY :: was called 'ToggleExplorer' in minibufexplorer
   let l:win_num = RSH_BUF_find(g:RSH_BUF_title)
   if (l:win_num != -1)
      call RSH_BUF_stop()
   else
      call RSH_BUF_update()
      wincmd p
   endif
endfunction





""=============================================================================#
""===[[ UTILITY ]]=============================================================#
""=============================================================================#


"find a window number for a named buffer
function! RSH_TAG_find(buf_name)
   let l:buf_num = bufnr(a:buf_name)
   if (l:buf_num != -1)
      let l:win_num = bufwinnr(l:buf_num)
   else
      let l:win_num = -1
   endif
   return l:win_num
endfunction




""=============================================================================#
""===[[ WINDOW UPDATE CODE ]]==================================================#
""=============================================================================#


function! RSH_TAG_update()
   " don't update during updates :)
      if (g:RSH_TAG_locked == "y")
         return
      endif
   " remember the current win/buf
      let l:buf_cur = bufnr('%')
      "let l:win_cur = bufwinnr(l:buf_cur)
   " start locking
      let g:RSH_BUF_locked = "y"
      let g:RSH_TAG_locked = "y"
   " keep a counter for debugging/tuning
      let g:RSH_TAG_times  = g:RSH_TAG_times + 1
   " check for the main window
      let l:win_num = RSH_TAG_find(g:RSH_TAG_title)
      if (l:win_num == -1)
         call RSH_TAG_config()
         let l:win_num = RSH_TAG_find(g:RSH_TAG_title)
      endif
      exec l:win_num.' wincmd w'
   " update the buffer list
      call RSH_TAG_list()
   " get back to the original window (with new buffer)
      let l:win_cur = bufwinnr(l:buf_cur)
      if (l:win_cur != -1)
         exec l:win_cur.' wincmd w'
      endif
   " done and returning to user
   let g:RSH_TAG_locked = "n"
   let g:RSH_BUF_locked = "n"
   return
endfunction


function! RSH_TAG_config()
   " was called 'StartExplorer' in minibufexplorer
   call RSH_TAG_create()
   if bufname('%') == g:RSH_TAG_title
      setlocal modifiable
      " structural addributes
         setlocal noswapfile
         setlocal buftype=nofile
         setlocal bufhidden=delete
         setlocal nobuflisted
      " commmon cosmetic attributes
         setlocal nowrap
         setlocal nonumber
         setlocal nocursorcolumn
         setlocal nocursorline
      " cosmetic attributes
         setlocal winfixwidth
         setlocal textwidth=1000
      " folding for taglist
         setlocal foldenable
         setlocal foldcolumn=0
         setlocal foldminlines=0
         setlocal foldmethod=manual
         setlocal foldlevel=9999
         " setlocal foldtext=v:folddashes.getline(v:foldstart)
      " other attributes
         setlocal filetype=taglist
      " create buffer local mappings for jumping to the tags and sorting the list
 "       nnoremap <buffer> <silent> <CR>
 "                   \ :call <SID>Tlist_Window_Jump_To_Tag('useopen')<CR>
 "       nnoremap <buffer> <silent> o
 "                   \ :call <SID>Tlist_Window_Jump_To_Tag('newwin')<CR>
 "       nnoremap <buffer> <silent> p
 "                   \ :call <SID>Tlist_Window_Jump_To_Tag('preview')<CR>
 "       nnoremap <buffer> <silent> P
 "                   \ :call <SID>Tlist_Window_Jump_To_Tag('prevwin')<CR>
 "       nnoremap <buffer> <silent> t
 "                   \ :call <SID>Tlist_Window_Jump_To_Tag('checktab')<CR>
 "       nnoremap <buffer> <silent> <C-t>
 "                   \ :call <SID>Tlist_Window_Jump_To_Tag('newtab')<CR>
 "       nnoremap <buffer> <silent> <2-LeftMouse>
 "                   \ :call <SID>Tlist_Window_Jump_To_Tag('useopen')<CR>
 "       nnoremap <buffer> <silent> s
 "                   \ :call <SID>Tlist_Change_Sort('cmd', 'toggle', '')<CR>
 "       nnoremap <buffer> <silent> + :silent! foldopen<CR>
 "       nnoremap <buffer> <silent> - :silent! foldclose<CR>
 "       nnoremap <buffer> <silent> * :silent! %foldopen!<CR>
 "       nnoremap <buffer> <silent> = :silent! %foldclose<CR>
 "       nnoremap <buffer> <silent> <kPlus> :silent! foldopen<CR>
 "       nnoremap <buffer> <silent> <kMinus> :silent! foldclose<CR>
 "       nnoremap <buffer> <silent> <kMultiply> :silent! %foldopen!<CR>
 "       nnoremap <buffer> <silent> <Space> :call <SID>Tlist_Window_Show_Info()<CR>
 "       nnoremap <buffer> <silent> u :call <SID>Tlist_Window_Update_File()<CR>
 "       nnoremap <buffer> <silent> d :call <SID>Tlist_Remove_File(-1, 1)<CR>
 "       nnoremap <buffer> <silent> x :call <SID>Tlist_Window_Zoom()<CR>
 "       nnoremap <buffer> <silent> [[ :call <SID>Tlist_Window_Move_To_File(-1)<CR>
 "       nnoremap <buffer> <silent> <BS> :call <SID>Tlist_Window_Move_To_File(-1)<CR>
 "       nnoremap <buffer> <silent> ]] :call <SID>Tlist_Window_Move_To_File(1)<CR>
 "       nnoremap <buffer> <silent> <Tab> :call <SID>Tlist_Window_Move_To_File(1)<CR>
 "       nnoremap <buffer> <silent> <F1> :call <SID>Tlist_Window_Toggle_Help_Text()<CR>
 "       nnoremap <buffer> <silent> q :close<CR>

      " syntax highlighting
         syn clear
         syn match rsh_tag_file               '^[A-Za-z_.]\+[ ]\+FILE'
         syn match rsh_tag_major              '^  [a-z].*'
         syn match rsh_tag_context            '^  [a-z][a-z][a-z] [=].*'
         hi rsh_tag_file     cterm=reverse  ctermbg=none   ctermfg=0
         hi rsh_tag_major    cterm=bold     ctermbg=none   ctermfg=6
         hi rsh_tag_context  cterm=none     ctermbg=none   ctermfg=3
      setlocal nomodifiable
   endif
   return
endfunction


"recreate the buf_list
function! RSH_TAG_list()
   " HISTORY :: was called 'BuildBufferList' in minibufexplorer
   let l:win_num = RSH_TAG_find(g:RSH_TAG_title)
   if (l:win_num != -1)
      exec l:win_num.' wincmd w'
   endif
   setlocal modifiable
   let l:max_buf_num = bufnr('$')     " Get the number of the last buffer.
   let l:buf_list    = ""
   " Loop through every buffer less than the total number of buffers.
   let l:i = 0                     " buffer index
   " ********************* BEGIN
   " Ignore the filetype autocommands
   let old_eventignore = &eventignore
   set eventignore=FileType
   " Save the 'filetype', as this will be changed temporarily
   let old_filetype = &filetype
   " ********************* END
   while (l:i <= l:max_buf_num)
      let l:i = l:i + 1
      if (getbufvar(l:i, '&buflisted') == 1)
         if (getbufvar(l:i, '&modifiable') == 1)
            "if (l:i <= 3)
               let l:full_name = bufname(l:i)
               let l:base_loc  = match(l:full_name,"[A-Za-z0-9_.]*$")
               let l:base_name = strpart(l:full_name,l:base_loc)
               let l:path_name = strpart(l:full_name,0,l:base_loc)
               if (l:path_name == "")
                  let l:path_name = "~"
               endif
               " ********************* BEGIN
               " Run filetypedetect group of autocommands to determine filetype
               exe 'doautocmd filetypedetect BufRead ' . l:full_name
               " ********************* END
               let l:buf_type  = &filetype
               let &filetype = old_filetype
               exec "$"
               exec "normal i\b\b\b".l:base_name."                                    FILE\n"
               exec "normal i  loc = ".l:path_name."\n"
               exec "normal i  syn = ".l:buf_type."\n"
               exec "normal i  lin = "
               exec ":r !cat ".l:full_name." | wc -l"
               exec "normal k"
               exec "normal J"
               exec "$"
               exec "normal o\n"
               exec "normal mx"
               exec "normal o\n"
               exec ":silent $!exuberant-ctags -x --language-force=".l:buf_type." --sort=no --fields=+afiksS --extra=+q --c-kinds=+pxl --c++-kinds=+pxl --file-scope=yes ".l:full_name
               exec "normal 'x"
               exec ":silent .,$!_ctags"
               exec "$"
               exec "normal o"
               exec "$"
            "endif
         endif
      endif
   endwhile
   exec ":0"
   " ********************* BEGIN
   " Restore the previous state
   let &filetype = old_filetype
   let &eventignore = old_eventignore
   " ********************* END
   setlocal nomodifiable
   return
endfunction

" find or create the buffer window
function! RSH_TAG_create()
   " was called 'FindCreateWindow' in minibufexplorer
   let l:win_num = RSH_TAG_find(g:RSH_TAG_title)
   if (l:win_num != -1)
      exec l:win_num.' wincmd w'
   else
      exec 'vert split '.g:RSH_TAG_title
      let  l:win_num = RSH_TAG_find(g:RSH_TAG_title)
      exec l:win_num.' wincmd w'
   endif
   vert resize 20
   return
endfunction


