""===[[ START HDOC ]]==========================================================#
""===[[ HEADER ]]==============================================================#

"   niche         : vim-ide (integrated development environment)
"   application   : rsh_csc.vim
"   purpose       : provide cscope x-ref and search access inside vim
"   base_system   : gnu/linux
"   lang_name     : vim script
"   created       : svq - long, long ago
"   author        : the_heatherlys
"   dependencies  : none (vim only)
"   permissions   : GPL-2 with no warranty of any kind
"
"
""===[[ PURPOSE ]]=============================================================#

"   rsh_csc is a fast, clear, standard, and integrated x-ref tool based on
"   cscope/grep to allow a programmer to rapidly understand and move through
"   a group of source files, confidently make changes, and support automated
"   refactoring
"
"   cscope is an enduring, powerful, and insightful tool, but its traditional
"   us is as a stand-alone tool that calls, but does not integrate, with an
"   editor.  what this plugin will do is tie cscope back into vim and then
"   make its capabilities available to automated refacortoring in order to
"   drive down the cost and danger of making changes
"
"
""===[[ WORK ]]================================================================#

"  TODO make key mapping work like rsh_tag using ",g"
"  TODO have search options, incl, last '/' search, regex, and under cursor
"  TODO have a "replace" option that can immitate the last ":s" replacement
"  TODO add an undo feature
"  TODO create a pre-verify option for relacement (buffer vs. saved file)
"
"
""===[[ END HDOC ]]============================================================#



""===[[ GLOBALS ]]=============================================================#

"---(general)------------------------------------#
let g:RSH_CSC_title    = "HCSC_buffer"
let g:RSH_CSC_times    = 0
let g:RSH_CSC_locked   = "n"
let g:RSH_CSC_curbuf   = -1
let g:RSH_CSC_line     = 0
let g:RSH_CSC_lines    = 0
let g:RSH_CSC_current  = ""
let g:RSH_CSC_sources  = "UNSET"
let g:RSH_CSC_symbol   = ""
let g:RSH_CSC_size     = 10

"---(current search)-----------------------------#
let g:HCSC_sword1      = ""
let g:HCSC_sword2      = ""
let g:HCSC_sregex      = ""
let g:HCSC_scurr       = ""
let g:HCSC_sbufname    = ""


"---(current tag)--------------------------------#
let g:HCSC_tagn        = ""
let g:HCSC_line        = 0
let g:HCSC_file        = ""
let g:HCSC_orig        = ""



"==============================================================================#
"=======                        initialization                          =======#
"==============================================================================#



"===[ ROOT   ]===> main setup routine
function! HCSC_init()
   silent! exec 'botright split ' . g:RSH_CSC_title
   setlocal modifiable
   call HALL_start()
   call HCSC_syntax()
   call HCSC_keys()
   setlocal nomodifiable
   hide
   return
endfunction



"===[ LEAF   ]===> establish syntax highlighting
function! HCSC_syntax()
   syntax clear
   syntax match rsh_csc_mtag     '^[a-z-][a-z-]  '        containedin=rsh_csc_entry
   syntax match rsh_csc_ftag     ' \[[a-z-][a-z-]\] '   containedin=rsh_csc_entry
   syntax match rsh_csc_num      ' : [0-9 ][0-9 ][0-9 ][0-9] : ' containedin=rsh_csc_entry
   syntax match rsh_csc_entry    '^[a-z-][a-z-]  .*$'
            \ containedin=rsh_fix_eone, rsh_fix_wone
   hi rsh_csc_entry    cterm=bold   ctermbg=none  ctermfg=3
   hi rsh_csc_mtag     cterm=bold   ctermbg=none  ctermfg=4
   hi rsh_csc_ftag     cterm=bold   ctermbg=none  ctermfg=4
   hi rsh_csc_num      cterm=bold   ctermbg=none  ctermfg=5
   syntax match rsh_csc_count    ' [0-9][0-9]* '        containedin=rsh_csc_sum
   syntax match rsh_csc_search   '^? :: .*$'
   syntax match rsh_csc_sum      '^grep/cscope .*$'
   hi rsh_csc_search   cterm=none   ctermbg=1     ctermfg=none
   hi rsh_csc_sum      cterm=none   ctermbg=2     ctermfg=none
   hi rsh_csc_count    cterm=none   ctermbg=3     ctermfg=none
   return
endfunction



"===[ LEAF   ]===> establish the buffer specific key mapping
function! HCSC_keys()
   nmap          ,g       :call RSH_CSC_show(expand("<cword>"), expand("<cWORD>"))<cr>
   nmap <buffer>  a        :call RSH_CSC_search("a")<cr>
   nmap <buffer>  A        :call RSH_CSC_search("A")<cr>
   nmap <buffer>  b        :call RSH_CSC_search("b")<cr>
   nmap <buffer>  B        :call RSH_CSC_search("B")<cr>
   nmap <buffer>  p        :call RSH_CSC_search("p")<cr>
   nmap <buffer>  P        :call RSH_CSC_search("P")<cr>
   nmap <buffer>  s        :call RSH_CSC_search("s")<cr>
   nmap <buffer>  S        :call RSH_CSC_search("S")<cr>
   nmap <buffer>  -        :call RSH_CSC_resize(10)<cr>
   nmap <buffer>  +        :call RSH_CSC_resize(20)<cr>
   nmap <buffer>  h        :call RSH_CSC_hide()<cr>
   "nmap          ;r       :call RSH_CSC_replace()<cr>
   return
endfunction



""===[[ START/STOP ]]==========================================================#



function! RSH_CSC_show(cword1, cword2)
   "---(remember where we were)------------------#
   if (HBUF_save("HCSC_show()         :: ") < 1)
      return
   endif
   let  g:HCSC_sbufname = bufname('%')
   "---(lock it down)----------------------------#
   call HALL_lock()
   "---(check for the buffer)--------------------#
   let l:buf_num = HBUF_by_name(g:RSH_CSC_title) 
   if (l:buf_num < 0)
      call HCSC_init()
   elseif (l:buf_num > 0)
      hide
   endif
   "---(open the buffer window)------------------#
   silent! exec 'botright split ' . g:RSH_CSC_title
   silent! exec "resize ".g:RSH_CSC_size
   "---(grab the current conditions)-------------#
   let  g:HCSC_sword1  = a:cword1
   let  g:HCSC_sword2  = a:cword2
   let  g:HCSC_sregex  = @/
   let  g:HCSC_sregex  = substitute(g:HCSC_sregex, "\\", "", "g")
   let  g:HCSC_sregex  = substitute(g:HCSC_sregex, "\<", "", "g")
   let  g:HCSC_sregex  = substitute(g:HCSC_sregex, "\>", "", "g")
   "---(update the top line)---------------------#
   normal gg
   normal 0
   setlocal modifiable
   exec "normal R? :: ".
            \ " (p) <<".g:HCSC_scurr.">>  ".
            \ " (a) <<".g:HCSC_sword1.">>  ".
            \ " (b) <<".g:HCSC_sword2.">>  ".
            \ " (s) <<".g:HCSC_sregex.">>  ".
            \ "                                                                  "
   normal 0
   setlocal nomodifiable
   "---(open it up)------------------------------#
   call HALL_unlock()
   "---(complete)--------------------------------#
   return
endfunction



function! RSH_CSC_resize(height)
   let g:RSH_CSC_size  = a:height
   silent! exec "resize ".g:RSH_CSC_size
   normal gg
   call HBUF_restore()
   return
endfunction



function! RSH_CSC_hide()
   "---(check for the buffer)--------------------#
   let l:buf_num = bufnr(g:RSH_CSC_title)
   if (l:buf_num < 1)
      return
   endif
   "---(check for the window)--------------------#
   let l:win_num = bufwinnr(l:buf_num)
   if (l:win_num < 1)
      return
   endif
   "---(open the buffer window)------------------#
   silent! exec l:win_num.' wincmd w'
   silent! hide
   echon "RSH_CSC_hide()      :: put away the cscope/grep window..."
   "---(complete)--------------------------------#
   normal ,a
   return
endfunction



function! RSH_FIX_toggle()
   "---(check for the buffer)--------------------#
   let l:buf_num = bufnr(g:RSH_FIX_title)
   if (l:buf_num < 1)
      call RSH_FIX_show()
      return
   endif
   "---(check for the window)--------------------#
   let l:win_num = bufwinnr(l:buf_num)
   if (l:win_num > 0)
      call RSH_FIX_hide()
   else
      call RSH_FIX_show()
   endif
   "---(complete)--------------------------------#
   return
endfunction



function! RSH_CSC_search(type)
   if (bufwinnr(g:HTAG_title) < 1)
      echon "RSH_CSC_search()    :: tag window must be open (returning)..."
      return
   endif
   call HALL_lock()
   "---(local variables)-------------------------#
   let  l:hmajor    = 13                         " major letter of hint (awk)
   let  l:hminor    = 0                          " minor letter of hint (awk)
   let  l:replace   = "[zz] testing"             " default function ref
   let  l:full_line = ""                         " current buffer line contents
   let  l:line_eof  = 0                          " end of file line number
   let  l:entry     = 1                          " current iteration
   "---(pick search subject)---------------------#
   setlocal noignorecase
   setlocal nosmartcase
   let  g:HCSC_type   = a:type
   if     a:type == "a"
      let  l:subject = g:HCSC_sword1
      let  l:scope   = '*.{c,h,cpp,hpp,vim,sh}'
      let  l:message = "in all programs (c,h,cpp,hpp,vim,sh) in current directory..."
   elseif a:type == "A"
      let  l:subject = g:HCSC_sword1
      let  l:scope   = g:HCSC_sbufname
      let  l:message = "in just the ".l:scope." program file..."
   elseif a:type == "b"
      let  l:subject = g:HCSC_sword2
      let  l:scope   = '*.{c,h,cpp,hpp,vim,sh}'
      let  l:message = "in all programs (c,h,cpp,hpp,vim,sh) in current directory..."
   elseif a:type == "B"
      let  l:subject = g:HCSC_sword2
      let  l:scope   = g:HCSC_sbufname
      let  l:message = "in just the ".l:scope." program file..."
   elseif a:type == "p"
      if (g:HCSC_scurr ==  "")
         return
      endif
      let  l:subject = g:HCSC_scurr
      let  l:scope   = '*.{c,h,cpp,hpp,vim,sh}'
      let  l:message = "in all programs (c,h,cpp,hpp,vim,sh) in current directory..."
   elseif a:type == "P"
      if (g:HCSC_scurr ==  "")
         return
      endif
      let  l:subject = g:HCSC_scurr
      let  l:scope   = g:HCSC_sbufname
      let  l:message = "in just the ".l:scope." program file..."
   elseif a:type == "s"
      let  l:subject = g:HCSC_sregex
      let  l:scope   = '*.{c,h,cpp,hpp,vim,sh}'
      let  l:message = "in all programs (c,h,cpp,hpp,vim,sh) in current directory..."
   elseif a:type == "S"
      let  l:subject = g:HCSC_sregex
      let  l:scope   = g:HCSC_sbufname
      let  l:message = "in just the ".l:scope." program file..."
   else
      return
   endif
   let  g:HCSC_scurr  = l:subject
   "---(clean off old data)----------------------#
   setlocal modifiable
   normal "GG"
   let  l:line_eof     = line('.')
   if (l:line_eof > 1)
      exec ":2,$delete"
   endif
   normal o
   "---(find with grep)--------------------------#
   exec ":silent $!grep --line-number --with-filename --no-messages --word-regexp \"".l:subject."\" ".l:scope
   "---(clean with awk)--------------------------#
   silent! exec ":silent! 2,$!rsh_csc.awk 'g_hmajor=".l:hmajor."' 'g_hminor=".l:hminor."' 'g_symbol=".l:subject."' 'g_scope=".l:message."'"
   "---(set match syntax)------------------------#
   execute 'silent! syntax clear rsh_csc_match'
   execute 'highlight rsh_csc_match cterm=bold ctermbg=4 ctermfg=6'
   execute 'syntax match rsh_csc_match "\<' .l:subject. '\>" containedin=ALL'
   "---(get the last line)-----------------------#
   normal "GG"
   let  l:line_eof = line('.') - 2
   let  l:entry    = 1
   if (l:entry > l:line_eof)
      exec "normal ogrep/cscope has 0 matches...                                                                                            "
   endif
   "---(get the function names)------------------#
   while l:entry <= l:line_eof
      "---(get the next entry)-------------------#
      exec "normal ".(l:entry + 2)."G"
      normal 0
      let  l:full_line    = getline('.')
      "---(get the file name)--------------------#
      normal 7l
      normal E
      let  l:word_end = col('.')
      let  l:rcsc_file    = strpart(l:full_line, 6, l:word_end - 6)
      "---(get the line number)------------------#
      normal 0
      normal 52lw
      let  l:word_beg = col('.') - 1
      normal e
      let  l:word_end = col('.')
      let  l:rcsc_line    = strpart(l:full_line, l:word_beg, l:word_end - l:word_beg) + 0
      "---(call the tag search)------------------#
      let  l:replace = HTAG_findloc(l:rcsc_file, l:rcsc_line)
      "---(return to the csc buffer)-------------#
      normal 0
      normal 25l
      exec "normal R".l:replace
      "---(replace the buffer reference)---------#
      let l:its_buf = bufnr(l:rcsc_file)
      if l:its_buf < 1
         let l:its_buf = '-'
      endif
      if l:its_buf > 9
         let l:its_buf = '+'
      endif
      normal 0
      normal 4l
      exec "normal R".l:its_buf
      "---(get ready for the next loop)----------#
      let l:entry = l:entry + 1
   endwhile
   "---(complete)--------------------------------#
   normal gg
   normal 0
   exec "normal R? :: ".
            \ " (p) <<".g:HCSC_scurr.">>  ".
            \ " (a) <<".g:HCSC_sword1.">>  ".
            \ " (b) <<".g:HCSC_sword2.">>  ".
            \ " (s) <<".g:HCSC_sregex.">>  ".
            \ "                                                                  "
   normal 0
   setlocal nomodifiable
   call HBUF_restore()
   call HALL_unlock()
   return
endfunction



function! HCSC_parse()
   "---(initialize)------------------------------#
   let  g:HCSC_tagn    = ""
   let  g:HCSC_line    = 0
   let  g:HCSC_file    = ""
   let  g:HCSC_orig    = ""
   "---(check for null)--------------------------#
   let  l:full_line = getline('.')
   if (strpart(l:full_line, 2, 2) != "  ")
      return 0
   endif
   "---(tag number)------------------------------#
   let  g:HCSC_tagn    = strpart(l:full_line, 0, 2)
   "---(file name)-------------------------------#
   normal 7l
   normal E
   let  l:word_end = col('.')
   let  l:HCSC_file    = strpart(l:full_line, 6, l:word_end - 6)
   "---(line number)-----------------------------#
   normal 0
   normal 52lw
   let  l:word_beg = col('.') - 1
   normal e
   let  l:word_end = col('.')
   let  l:HCSC_line    = strpart(l:full_line, l:word_beg, l:word_end - l:word_beg) + 0
   "---(full line)-------------------------------#
   let  g:HCSC_orig    = matchstr(l:full_line, ":::.*$")
   let  g:HCSC_orig    = strpart(g:HCSC_orig, 3, strlen(g:HCSC_orig) - 3)
   "---(complete)--------------------------------#
   return 1
endfunction



function! HCSC_ftag(tagtext)
   normal 0
   normal 25l
   exec "normal R".a:tagtext
   return
endfunction



function! RSH_CSC_hints(tag)
   "---(switch to tag window)-----------------#
   let    l:buf_cur = bufnr('%')
   let    l:win_num = HBUF_by_name(g:RSH_CSC_title)
   if (l:win_num < 1)
      echon "  -- CSC not open, can not process..."
   endif
   silent exec l:win_num.' wincmd w'
   normal gg
   "---(find the tag)-------------------------#
   call   search("^" . a:tag . "  ")
   if line(".") < 2
      echon "  -- tag not found, can not process..."
      return
   endif
   normal 0
   let  l:full_line    = getline('.')
   "---(parse the tag entry)------------------#
   normal 7l
   normal E
   let  l:word_end = col('.')
   let  l:rcsc_file    = strpart(l:full_line, 6, l:word_end - 6)
   "---(get the line number)------------------#
   normal 0
   normal 52lw
   let  l:word_beg = col('.') - 1
   normal e
   let  l:word_end = col('.')
   let  l:rcsc_line    = strpart(l:full_line, l:word_beg, l:word_end - l:word_beg) + 0
   "---(get back to the original window)------#
   normal ,a
   let l:buf_num = bufnr(l:rcsc_file)
   if (l:buf_num == -1)
      echo "RSH_CSC_hints()          :: buffer not open in wim..."
      return
   else
      silent exec('b! ' . l:buf_num)
   endif
   "---(get to the right line)----------------# make sure to show comments above
   normal gg
   silent! exec "normal " . (l:rcsc_line - 1) . "j"
   silent! exec "normal z."
   "---(do special highlighting)--------------#
   "silent exec "highlight rsh_tag_match cterm=reverse"
   "silent exec "match rsh_tag_match /".l:rtag_iden."/"
   return
endfunction



function! RSH_CSC_replace()
   " TODO [0001][wa] create a verification version to make sure all changes are possible to avoid foul-ups
   let  l:line_eof  = 0                          " end of file line number
   let  l:count     = 1                          " current iteration
   let  l:prog_line = 0
   "---(check that a search is active)-----------#
   if g:RSH_CSC_symbol == ""
      echo "RSH_CSC_replace()        :: symbol not set, search first..."
      return
   endif
   "---(get the replacement text)----------------#
   let    l:tobe = input("change <<".g:RSH_CSC_symbol.">> to : ", g:RSH_CSC_symbol)
   "---(verify the change)-----------------------#
   let    l:confirm = input("change <<".g:RSH_CSC_symbol.">> to <<".l:tobe.">> (y/n/c) : ", "n")
   if l:confirm != "y" && l:confirm != "c"
      echo "RSH_CSC_replace()        :: canceled by user..."
      return
   endif
   "---(do it)-----------------------------------#
   echo "RSH_CSC_replace()        :: changing "
   let  g:HBUF_locked = "y"
   let  g:HTAG_locked = "y"
   "---(get the csc window up)-------------------#
   normal ,a
   let l:prog_buf    = bufnr('%')     " get the tag buffer number
   normal gt
   let l:prog_line   = line('.')
   call RSH_CSC_show()
   let l:my_buf      = bufnr('%')     " get the tag buffer number
   "---(get the last line)-----------------------#
   normal "GG"
   let  l:line_eof     = line('.')
   "---(get the function names)------------------#
   while l:count < l:line_eof
      "---(get the next entry)-------------------#
      normal gg
      exec "normal ".l:count."j"
      normal 0
      let  l:full_line    = getline('.')
      "---(get the file name)--------------------#
      normal 7l
      normal E
      let  l:word_end = col('.')
      let  l:rcsc_file    = strpart(l:full_line, 6, l:word_end - 6)
      "---(get the line number)------------------#
      normal 0
      normal 52lw
      let  l:word_beg = col('.') - 1
      normal e
      let  l:word_end = col('.')
      let  l:rcsc_line    = strpart(l:full_line, l:word_beg, l:word_end - l:word_beg) + 0
      "---(get to the right buffer)--------------#
      normal ,a
      let l:buf_num = bufnr(l:rcsc_file)
      if (l:buf_num == -1)
         echo "RSH_CSC_hints()          :: could not load ".l:rcsc_file." FATAL..."
         return
      endif
      silent! exec('b! ' . l:buf_num)
      "---(get to the right line)----------------# make sure to show comments above
      normal gg
      silent! exec "normal " . (l:rcsc_line - 1) . "j"
      let   l:verify = search(g:RSH_CSC_symbol, "cW", l:rcsc_line)
      let   l:its_col = col('.') - 2
      silent! exec "normal ".strlen(g:RSH_CSC_symbol)."dl"
      normal 0
      if l:its_col < 0
         silent! exec "normal i".l:tobe
      elseif l:its_col == 0
         silent! exec "normal a".l:tobe
      else
         silent! exec "normal ".l:its_col."l"
         silent! exec "normal a".l:tobe
      endif
      echon "# "
      "---(return to the csc buffer)-------------#
      silent exec('b! ' . l:my_buf)
      "---(get ready for the next loop)----------#
      let l:count = l:count + 1
   endwhile
   "---(complete)--------------------------------#
   setlocal nomodifiable
   normal gg
   normal ,a
   silent! exec('b! ' . l:prog_buf)
   normal gg
   silent! exec "normal " . (l:prog_line - 1) . "j"
   normal zt
   let  g:HTAG_locked = "n"
   let  g:HBUF_locked = "n"
   echon "done."
   return
endfunction



call HCSC_init()
""===[[ END ]]=================================================================#
