""===[[ START HDOC ]]==========================================================#
""===[[ HEADER ]]==============================================================#

"   niche         : integrated development environment
"   application   : rsh_fix.vim
"   purpose       : provide simple, productive, effective quickfix replacement
"   base_system   : gnu/linux
"   lang_name     : vim script
"   created       : svq - long, long ago
"   author        : the_heatherlys
"   dependencies  : gcc (any version) and _rsh_fix.awk (custom)
"   permissions   : GPL-2 with no warranty of any kind
"
"
""===[[ PURPOSE ]]=============================================================#

"   rsh_fix is an integrated set of compile/fix services to make a painful,
"   repetitive, lengthy, tedious, and haphazard process into a clear, reliable,
"   consistent, automated, and smooth one.  why make something so frequent and
"   repetitive take up extra programmer cycles?
"
"   typically, the process entails
"      - creating/editing the source,
"      - compiling with suitable options,
"      - reading the compilier's complaints and warnings,
"      - identifying the top errors,
"      - jumping back to source file,
"      - finding the right the line/symbol,
"      - interpreting the error message,
"      - fixing the code,
"      - and then repeating until "clean enough" for gov't work
"   this is painful enough that programmers often ignore various warnings and
"   then don't then use additional static analysis tools to find more.  this
"   process is more or less efficient if multiple term sessions are used to
"   avoid getting in and out of applications and writing/printing error info
"
"   my goal with rsh_fix, is to provide...
"      - short cut to call up rsh_fix and compile in a side-by-side window
"      - enforced options/flags, such as "-Wall" and "-g"
"      - quick visual clue as to pass, fail, warning, or linker issues
"      - format the errors in a quick, one-line format each
"      - easy compile profiles, including pure ansi, c, c++, etc
"      - interface for using a make file or not
"      - sorting errors to the top, warnings lower
"      - select any error in listing and go to it in the source code
"      - toggle to see the original gcc output
"
"   many existing libraries and utilities have been built by better programmers
"   and are likely superior in speed, size, capability, and reliability; BUT,
"   i would not have learned nearly as much using them,  so follow the adage..
"
"  TO TRULY LEARN> do not seek to follow in the footsteps of the men of old;
"  seek what they sought ~ Matsuo Basho
"
"  ADVANTAGES, integrated compile/fix cycle...
"     - no window or terminal switches that slow down the process
"     - much less trivia about compiling to remember
"     - requires no finding and searching in source code
"     - forces the programmer to have the right compile switches/options
"     - is exactly repeatable and therefore dependable
"     - does not skip steps when under stress or time pressures
"     - supports refactoring for disciplined changes by speeding this process
"
"  DISADVANTAGES
"     - means that this module must be built and that takes time
"     - requires this module to be maintained and that takes more time too
"     - can cause the programmer to forget how to do it by hand
"
"
""===[[ DECISION ]]============================================================#

"  PROBLEM (pr)
"     programs are quite tedious to run through the compile/fix cycle nearly
"     continuously and therefore warnings get ignored, fixes come slower,
"     refactoring becomes more rare and dust/cobwebs grow
"
"  OBJECTIVES (o)
"     - make the compile/fix cycle as fast and automated as possible
"     - simple so that it does not require huge learning curve
"     - eleviate much of the pain so small changes get made more often
"
"  ALTERNATIVES and CONSEQUENCES (ac)
"
"     1) keep it manual from the command line
"        - everything is already in place, so no new work
"        - it will exist like this in any environment, so consistent
"        - requires more repetition, typing, and memory
"        - user spends most of the time identifying and finding, not fixing
"
"     2) use make files consistently
"        - this is also a common tool and standard format
"        - greatly eases the compilation task
"        - does not help in identifying and finding the errors
"        - still requires too much time away from fixing
"
"     3) standard vim quickfix
"        - tool is already built in and works
"        - has all the major features needed, and then some
"        - requires the programmer to remember command line commands
"        - still requires a fair amount of coding
"
"     4) use a generally available script
"        - already built and tested on vim
"        - someone else maintains it
"        - often requires other "script" elements that that programmer built
"        - will go out of support as it is freeware
"
"     5) build my own script based on the work of others
"        - will fit like a glove and fits into my development environment
"        - allows me to minimize the keystrokes based on my needs
"        - just one more thing i must maintain
"        - will have to move it between machines to have it where i need it
"
"  JUDGEMENT
"
"     only part-timers or newbees think that this should be done by hand as
"     they don't have to maintain software under time pressure.  as long as
"     an option is relatively simple and can speed this process it is a godsend
"
"     it is critical that i do everything i can to speed this cycle so i can
"     take on as many projects as maximally possible (and then some) to keep
"     the personal goals moving forward; therefore, automate early and often.
"
"     finally, without rapid compile/fix you can not refactor with any
"     confidence and therefore maintaining code becomes more of a hit-and-miss
"     which is completely unacceptable
"
"     i choose to build my own scripts at they will never exceed 500 code lines
"     and the results will be maximally tuned to speed and my needs.  also
"     the existing scripts are continuously being superceeded and outmoded
"     so that key features come and go and user interface changes which is
"     unexceptable, so i will build a consistent one
"
"  BOTTOM LINE : code like your life depends on it, because someday it will
"
"
""===[[ END HDOC ]]============================================================#



""===[[ GLOBALS ]]=============================================================#
let g:RSH_FIX_title    = "HFIX_buffer"
let g:RSH_FIX_locked   = "n"
let g:RSH_FIX_curbuf   = -1
let g:RSH_FIX_sources  = ""






"==============================================================================#
"=======                        initialization                          =======#
"==============================================================================#



"===[ ROOT   ]===> main setup driver <=========================================#
function! HFIX_init()
   silent! exec 'vert split ' . g:RSH_FIX_title
   setlocal modifiable
   call HALL_start()
   call HFIX_syntax()
   call HFIX_keys()
   setlocal nomodifiable
   hide
   return
endfunction



"===[ LEAF   ]===> establish syntax highlighting <=============================#
function! HFIX_syntax()
   syntax clear
   "---(syntax highlighting = headers)-----------#
   syntax match rsh_fix_file     '^sources :: .*$'
   syntax match rsh_fix_opt      '^options :: .*$'
   syntax match rsh_fix_end      '^beginning of .*$'
   syntax match rsh_fix_end      '^end of .*$'
   syntax match rsh_fix_help     '^help   .*$'
   syntax match rsh_fix_esum     '^.*(FAIL).*$'
   syntax match rsh_fix_wsum     '^.*(warn).*$'
   syntax match rsh_fix_lsum     '^.*(LINK).*$'
   syntax match rsh_fix_psum     '^.*(pass).*$'
   hi rsh_fix_file  cterm=bold   ctermbg=none  ctermfg=5
   hi rsh_fix_opt   cterm=bold   ctermbg=none  ctermfg=5
   hi rsh_fix_end   cterm=bold,reverse  ctermbg=none  ctermfg=5
   hi rsh_fix_help  cterm=bold   ctermbg=none  ctermfg=5
   hi rsh_fix_esum  cterm=none   ctermbg=1     ctermfg=none
   hi rsh_fix_wsum  cterm=none   ctermbg=3     ctermfg=none
   hi rsh_fix_lsum  cterm=none   ctermbg=5     ctermfg=none
   hi rsh_fix_psum  cterm=none   ctermbg=2     ctermfg=none
   "---(syntax highlighting = lines)-------------#
   syntax match rsh_fix_lone     '^..[L]  .*$'
   syntax match rsh_fix_eone     '^..[E]  .*$'
   syntax match rsh_fix_wone     '^..[-]  .*$'
   syntax match rsh_fix_pone     '^..[*]  .*$'
   hi rsh_fix_lone  cterm=bold   ctermbg=none  ctermfg=1
   hi rsh_fix_eone  cterm=bold   ctermbg=none  ctermfg=1
   hi rsh_fix_wone  cterm=bold   ctermbg=none  ctermfg=3
   hi rsh_fix_pone  cterm=bold   ctermbg=none  ctermfg=2
   "---(syntax highlighting = numbers)-----------#
   syntax match rsh_fix_num      ' : [0-9 ][0-9 ][0-9 ][0-9] : '
            \ containedin=rsh_fix_eone, rsh_fix_wone
   hi rsh_fix_num   cterm=bold   ctermbg=none  ctermfg=5
   "---(syntax highlighting = current line)------#
   syntax match rsh_fix_ecur      '^>>'
            \ containedin=rsh_fix_eline, rsh_fix_wline
   hi rsh_fix_ecur  cterm=bold,reverse  ctermbg=none ctermfg=5
   return
endfunction



"===[ LEAF   ]===> establish the buffer specific key mapping <=================#
function! HFIX_keys()
   nmap          ,q  :call RSH_FIX_show()<cr>
   nmap <buffer> a   :call RSH_FIX_compile("a")<cr>
   nmap <buffer> c   :call RSH_FIX_compile("c")<cr>
   nmap <buffer> p   :call RSH_FIX_compile("p")<cr>
   nmap <buffer> m   :call RSH_FIX_compile("m")<cr>
   nmap <buffer> b   :call RSH_FIX_compile("b")<cr>
   nmap <buffer> f   :call RSH_FIX_parse()<cr>
   nmap <buffer> j   j0
   nmap <buffer> k   k0
   nmap <buffer> h   :call RSH_FIX_hide()<cr>
   return
endfunction



function! RSH_FIX_compile(std)
   if (g:RSH_FIX_locked == "y")
      echon "RSH_FIX_compile()   :: already compiling, locked!"
      return
   endif
   let  g:RSH_FIX_locked = "y"
   echon "RSH_FIX_compile()    :: compiling ".g:RSH_FIX_sources."..."
   silent! exec l:win_num.' wincmd w'
   setlocal modifiable
   normal 1,$d
   let l:gcc_call = "gcc "
   let l:gcc_std  = "-g -pg -Wall -Wextra "
   " let l:gcc_std  = "-g -pg -Wall -Wextra -W -Wconversion -fprofile-arcs -ftest-coverage "
   if a:std == "a"
      let l:gcc_call  = "gcc "
      let l:gcc_std  .= " -ansi -pedantic "
   elseif a:std == "c"
      let l:gcc_call  = "gcc "
      let l:gcc_std  .= " -std=gnu89 "
   elseif a:std == "p"
      let l:gcc_call  = "g++ "
      let l:gcc_std  .= " "
   elseif a:std == "m"
      let l:gcc_call  = "make"
      let l:gcc_std   = " "
   elseif a:std == "b"
      let l:gcc_call  = "make install"
      let l:gcc_std   = " "
   else
      return
   endif
   "---(check for an installation)---------------#
   if a:std == "b"
      silent! exec ":silent 1,$!make install"
      normal gg
      exec printf("normal i%-86.86s\n", "beginning of installation feedback")
      "---(add a footer)----------------------------#
      normal GG
      exec "normal o"
      exec printf("normal i%-86.86s", "end of installation feedback")
   else
      "---(run the compilier)-----------------------#
      if a:std == "m"
         silent! exec ":silent 1,$!make clean"
         silent! exec ":silent 1,$!make"
      else
         silent! exec ":silent 1,$!".l:gcc_call.l:gcc_std.g:RSH_FIX_sources." -o current"
      endif
      "---(eliminate wide-characters)---------------#
      silent! exec ':silent 1,$:s/\%u2018/"/ge'
      silent! exec ':silent 1,$:s/\%u2019/"/ge'
      "---(format the results)----------------------#
      silent! exec ":silent 1,$!_quickfix.awk"
      "---(add a footer)----------------------------#
      normal GG
      exec "normal o"
      exec printf("normal i%-86.86s", "end of compiler feedback")
   endif
   "---(add a header)----------------------------#
   normal gg
   exec printf("normal Osources :: %-74.74s", g:RSH_FIX_sources)
   if a:std == "m"
      exec printf("normal ooptions :: %-4s using a Makefile", l:gcc_call)
   else
      exec printf("normal ooptions :: %-3s with ( %s)", l:gcc_call, l:gcc_std)
   endif
   exec printf("normal ohelp    :: %s",
            \ ",qh=hide ,qa=ansi ,qc=gnuc89 ,qp=gnuc++ ,qm=make ,,=next ,.=prev ,<=first ,>=last")
   "---(prepare for return)----------------------#
   normal gg4j
   setlocal nomodifiable
   "" call RSH_FIX_next("p")
   let  g:RSH_FIX_locked = "n"
   exec "normal ,a"
   return
endfunction



""===[[ START/STOP ]]==========================================================#

function! RSH_FIX_show()
   let l:buf_cur  = bufnr('%')
   "---(check to be in the right place)----------#
   if (getbufvar(l:buf_cur, '&modifiable') == 0)
      echon "RSH_FIX_show()      :: can not compile from specialty window..."
      return -1
   endif
   if (getbufvar(l:buf_cur, '&buflisted') == 0)
      echon "RSH_FIX_show()      :: can not compile from specialty window..."
      return -1
   endif
   "---(can only work on c)----------------------#
   let l:buf_name = bufname(l:buf_cur)
   let l:buf_type = getbufvar(l:buf_name, "&filetype")
   if l:buf_type != "c" && l:buf_type != "cpp"
      echon "RSH_FIX_show()      :: will only work on C sources..."
      return
   endif
   "---(check for the buffer)--------------------#
   let l:buf_num = bufnr(g:RSH_FIX_title)
   if (l:buf_num < 1)
      call HFIX_init()
   endif
   "---(check for the window)--------------------#
   let l:win_num = bufwinnr(l:buf_num)
   if (l:win_num > 0)
      silent exec l:win_num.' wincmd w'
      hide
   endif
   "---(open the buffer window)------------------#
   silent! exec 'split ' . g:RSH_FIX_title
   let l:win_num = bufwinnr(l:buf_num)
   silent! resize 15
   if g:RSH_FIX_sources != l:buf_name 
      let g:RSH_FIX_sources = l:buf_name 
      setlocal modifiable
      :1,$delete
      normal gg
      exec printf("normal isources :: %-74.74s", g:RSH_FIX_sources)
      normal 0
      "---(create the cleaver mappings)-------------#
      nmap          ,,  :call RSH_FIX_next("n")<cr>
      nmap          ,.  :call RSH_FIX_next("p")<cr>
      nmap          ,<  :call RSH_FIX_next("f")<cr>
      nmap          ,>  :call RSH_FIX_next("l")<cr>
      "---(complete)--------------------------------#
      setlocal nomodifiable
   else
      normal gg4j
      normal 0
   endif
   redraw!
   return l:win_num
endfunction

function! RSH_FIX_hide()
   "---(check for the buffer)--------------------#
   let l:buf_num = bufnr(g:RSH_FIX_title)
   if (l:buf_num < 1)
      return
   endif
   "---(check for the window)--------------------#
   let l:win_num = bufwinnr(l:buf_num)
   if (l:win_num < 1)
      return
   endif
   "---(open the buffer window)------------------#
   silent! exec l:win_num.' wincmd w'
   silent! hide
   echon "RSH_FIX_hide()      :: put away the compile/fix window..."
   "---(complete)--------------------------------#
   return
endfunction

function! RSH_FIX_toggle()
   "---(check for the buffer)--------------------#
   let l:buf_num = bufnr(g:RSH_FIX_title)
   if (l:buf_num < 1)
      call RSH_FIX_show()
      return
   endif
   "---(check for the window)--------------------#
   let l:win_num = bufwinnr(l:buf_num)
   if (l:win_num > 0)
      call RSH_FIX_hide()
   else
      call RSH_FIX_show()
   endif
   "---(complete)--------------------------------#
   return
endfunction



""===[[ UTILITY ]]=============================================================#

function! RSH_FIX_parse()
   "---(clear out old information)---------------#
   let l:efull    = ""
   let l:etype    = ""
   let l:ebuff    = ""
   let l:efile    = ""
   let l:eline    = 0
   let l:emesg    = ""
   let l:esymb    = ""
   "---(get the current error)-------------------#
   let l:efull = getline('.')
   if strpart(l:efull,0,2) != "  "
      echon "RSH_FIX_parse()     :: not a valid error line..."
      silent! normal ,a
      return
   endif
   "---(parse the error message)-----------------#
   let l:efile = matchstr(l:efull, "  #1#  .\*  #2#  ")
   let l:efile = strpart(l:efile,7,strlen(l:efile)-14)
   let l:ebuff = matchstr(l:efull, "  #2#  .\*  #3#  ")
   let l:ebuff = strpart(l:ebuff,7,strlen(l:ebuff)-14)
   let l:eline = matchstr(l:efull, "  #3#  [1-9][0-9]\*  #4#  ")
   let l:eline = strpart(l:eline,7,strlen(l:eline)-14) + 0
   let l:emesg = matchstr(l:efull, "  #4#  .\*  #5#  ")
   let l:emesg = strpart(l:emesg,7,strlen(l:emesg)-14)
   let l:esymb = matchstr(l:efull, "  #5#  .\*  #6#  ")
   let l:esymb = strpart(l:esymb,7,strlen(l:esymb)-14)
   let l:efull = matchstr(l:efull, "  #6#  .\*  #7#  ")
   let l:efull = strpart(l:efull,7,strlen(l:efull)-14)
   "---(mark this error)-------------------------#
   setlocal modifiable
   silent! normal 0R>>
   setlocal nomodifiable
   silent! normal ,a
   silent! exec 'b! ' . l:ebuff
   silent! normal gg
   silent! exec ":normal " . l:eline . "jk"
   silent! normal z.
   "let  [x_row,x_col] = searchpos(l:identifier,"",l:destline)
   "execute "silent! syntax clear rsh_fix_identifier"
   "execute "highlight link rsh_fix_identifier error"
   "execute "syntax match rsh_fix_identifier '" . l:identifier . "' containedin=ALL"
   echon "RSH_FIX_parse()     :: ".l:emesg
   return
endfunction



""=============================================================================#
""===[[ WINDOW UPDATE CODE ]]==================================================#
""=============================================================================#


function! RSH_FIX_clear()
   execute "silent! syntax clear rsh_fix_identifier"
   return
endfunction


function! RSH_FIX_next(dir)
   "---(check for the buffer)--------------------#
   let l:buf_num = bufnr(g:RSH_FIX_title)
   if (l:buf_num < 1)
      return
   endif
   "---(check for the window)--------------------#
   let l:win_num = bufwinnr(l:buf_num)
   if (l:win_num < 1)
      return
   endif
   "---(start updating)--------------------------#
   silent exec l:win_num.' wincmd w'
   "---(check for a valid error)-----------------#
   let l:line_cur = getline('.')
   if strpart(l:line_cur,0,2) != "  "
      if strpart(l:line_cur,0,2) != ">>"
         echon "RSH_FIX_next() :: not a valid error line, return to start..."
         silent! normal gg4j
         silent! normal ,a
         return
      else
         setlocal modifiable
         silent! normal 0R  
         setlocal nomodifiable
      endif
   endif
   if a:dir == "n"
      silent! normal j
   elseif a:dir == "p"
      silent! normal k
   elseif a:dir == "f"
      silent! normal gg4j
   elseif a:dir == "l"
      silent! normal GGk
   endif
   let l:line_cur = getline('.')
   if strpart(l:line_cur,0,2) != "  "
      if a:dir == "n"
         silent! normal k
      endif
      if a:dir == "p"
         silent! normal j
      endif
   endif
   call RSH_FIX_parse()
   "---(complete)--------------------------------#
   return
endfunction


""=============================================================================#
""===[[ WINDOW UPDATE CODE ]]==================================================#
""=============================================================================#



call HFIX_init()
""===[[ END ]]=================================================================#
